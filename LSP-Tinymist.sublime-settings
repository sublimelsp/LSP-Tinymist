{
    "command": ["$storage_path/LSP-Tinymist/tinymist"],
    "selector": "text.typst",
    "settings": {
        // Show pages and words count in the status bar.
        // Valid values: "enable", "disable"
        "compileStatus": "enable",
        // Whether to enable postfix code completion.
        // For example, `[A].box|` will be completed to `box[A]|`.
        "completion.postfix": true,
        // Whether to enable UFCS-style completion.
        // For example, `[A].box|` will be completed to `box[A]|`.
        "completion.postfixUfcs": true,
        // Whether to enable left-variant UFCS-style completion.
        // For example, `[A].table|` will be completed to `table(|)[A]`.
        "completion.postfixUfcsLeft": true,
        // Whether to enable right-variant UFCS-style completion.
        // For example, `[A].table|` will be completed to `table([A], |)`.
        "completion.postfixUfcsRight": true,
        // Whether to make symbol completion stepless.
        // For example, `$ar|$` will be completed to `$arrow.r$`.
        // Valid values: "step", "stepless"
        "completion.symbol": "step",
        // Whether to trigger completions on arguments (placeholders) of snippets.
        // For example, `box` will be completed to `box(|)`, and completions are
        // shown again at the position of the placeholder in the snippet.
        "completion.triggerOnSnippetPlaceholders": false,
        // The extension can export PDFs of your Typst files.
        // This setting controls whether this feature is enabled and how often it runs.
        // Valid values: "never", "onSave", "onType"
        "exportPdf": "never",
        // The target to export the document to.
        // Note: you can still export PDF when it is set to "html".
        // This configuration only affects how the language server completes your code.
        // Valid values:
        // "paged" - The current export target is for PDF, PNG, and SVG export.
        // "html"  - The current export target is for HTML export.
        "exportTarget": "paged",
        // A list of file or directory paths to fonts.
        // Note: the configuration source in higher priority will override the configuration
        // source in lower priority. The order of precedence is:
        // "fontPaths" > "typstExtraArgs.fontPaths" > LSP's CLI argument `--font-path` > the
        // environment variable `TYPST_FONT_PATHS` (a path list separated by `;` (on Windows)
        // or `:` (otherwise)). Note: if the path to fonts is a relative path, it will be
        // resolved based on the root directory.
        "fontPaths": [],
        // Sets the indent size (using spaces) for the formatter.
        "formatterIndentSize": 2,
        // The extension can format Typst files using typstfmt or typstyle.
        // Valid values: "disable", "typstyle", "typstfmt"
        "formatterMode": "typstyle",
        // Sets the print width for the formatter, which is a soft limit of characters per line.
        // See the definition of Print Width: https://prettier.io/docs/options.html#print-width
        // Note: this has lower priority than the formatter's specific configurations.
        "formatterPrintWidth": 120,
        // Controls how the formatter handles prose line wrapping.
        // If enabled, the formatter will insert hard line breaks at the specified print width.
        // If disabled, the formatter keeps the original line breaks and spaces.
        "formatterProseWrap": false,
        // Enable or disable lint checks.
        "lint.enabled": false,
        // Configure when to perform lint checks.
        // Valid values: "onSave", "onType"
        "lint.when": "onSave",
        // The path pattern to store Typst artifacts.
        // You can use the variables `$root`, `$dir` and `$name`, e.g. "$dir/$name" (default) or
        // "$root/target/$dir/$name".
        "outputPath": "",
        // Arguments used for the background preview server.
        // It is only used when "preview.background.enabled" is enabled.
        "preview.background.args": ["--data-plane-host=127.0.0.1:23635", "--invert-colors=auto"],
        // When enabled, the preview server listens a specific tcp port in the background.
        "preview.background.enabled": false,
        // The arguments used by `tinymist.startDefaultPreview` command.
        "preview.browsing.args": ["--data-plane-host=127.0.0.1:0", "--invert-colors=auto", "--open"],
        // Invert colors of the preview (useful for dark themes without cost).
        // Please note you could see the original colors when you hover elements in the preview.
        // It is also possible to specify strategy to each element kind by an object map in JSON format.
        // Valid values: "never", "auto", "always"
        "preview.invertColors": {
            "image": "never",
            "rest": "never"
        },
        // Only render visible part of the document. This can improve performance, but is still experimental.
        "preview.partialRendering": true,
        // Refresh preview when the document is saved or when the document is changed.
        // Valid values: "onSave", "onType"
        "preview.refresh": "onType",
        // This configuration specifies the way to resolve projects.
        // Valid values:
        // "singleFile"   - Each single file is an individual document and no project resolution is needed.
        // "lockDatabase" - For each workspace, Tinymist tracks your preview and compilation history, and
        //                  stores the information in a lock file. Tinymist will automatically select the
        //                  main file to use according to the lock file. This also allows other tools to
        //                  push preview and export tasks to the language server by updating the lock file.
        "projectResolution": "singleFile",
        // Configure the root for absolute paths in Typst.
        "rootPath": null,
        // Enable or disable semantic highlighting.
        // Valid values: "enable", "disable"
        "semanticTokens": "enable",
        // A flag that determines whether to load system fonts for the Typst compiler, which is
        // useful for ensuring reproducible compilation. If set to `null`, the extension will
        // use the default behavior of the Typst compiler.
        "systemFonts": true,
        // You can pass any arguments as you like, and we will try to follow behaviors of the
        // same version of Typst CLI. Note: the arguments may be overridden by other settings.
        "typstExtraArgs": [],
    }
}
